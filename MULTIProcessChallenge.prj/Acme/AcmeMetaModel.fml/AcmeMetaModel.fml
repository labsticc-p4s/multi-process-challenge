namespace "http://www.openflexo.org/MULTIProcessChallenge" as MULTIPROCESSCHALLENGE;

use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import [MULTIPROCESSCHALLENGE + "/MetaModel.fml"] as MetaModel;

@URI("http://www.openflexo.org/MULTIProcessChallenge/Acme/AcmeMetaModel.fml")
@Version("0.1")
@Author("sylvain")
public model AcmeMetaModel extends MetaModel {
	
	AcmeMetaModel acmeMetaModel values this;

	public concept CodingTaskType extends SoftwareEngineeringTaskType {

		ProgrammingLanguage language with ConceptInstance(virtualModelInstance=acmeMetaModel);
		
		create(String name) {
			super(parameters.name);
		}
		
		delete() {
		}

		Coding newTask(required String name, required Process process) {
			Coding returned = parameters.process.new Coding(parameters.name,this);
			log "prout: " + language.conceptType.name;
			if (language.conceptType.name == "COBOL") {
				returned.addToPerformingActor(container.getActor("Ann Smith"));
			}
			return returned;
		}
		boolean isValidActorType(required ActorType actorType) {
			return parameters.actorType.conceptType.name == "Developer";
		}
		boolean isValidProducedArtifactType(required ArtifactType artifactType) {
			return parameters.artifactType.conceptType.name == "CodeArtifactType";
		}
	}

	public concept Developer extends ActorType {
		
		create() {
		}
		
		delete() {
		}
	}

	public concept CodeArtifactType extends SoftwareEngineeringArtifactType{

		create(String name) {
			super(parameters.name);
		}
		
		delete() {
		}

		Code newArtifact(String name) {
			Code returned = new Code(parameters.name);
			returned.types.add(this);
			return returned;
		}
	}

	enum ProgrammingLanguage {
		JAVA,
		C,
		COBOL
	}

	public concept COBOLCode extends Code {
		
		create(String name) {
			super(parameters.name);
			//programmingLanguage = ProgrammingLanguage.COBOL;
		}

		delete() {
		}
	}

	public concept SoftwareEngineeringArtifactType extends ArtifactType {

		create(String name) {
			super(parameters.name);
		}
		
		delete() {
		}

		SoftwareEngineeringArtifact newArtifact(String name) {
			SoftwareEngineeringArtifact returned = new SoftwareEngineeringArtifact(parameters.name);
			returned.types.add(this);
			return returned;
		}
	}

	public concept SoftwareEngineeringArtifact extends Artifact {
		
		Actor responsible with ConceptInstance(virtualModelInstance=super.container);
		int versionNumber;

		create(String name) {
			super(parameters.name);
		}
		
		delete() {
		}
	}

	public concept Code extends SoftwareEngineeringArtifact {
		
		ProgrammingLanguage programmingLanguage with ConceptInstance(virtualModelInstance=container);

		create(String name) {
			super(parameters.name);
		}

		delete() {
		}
	}

	public concept Coding extends Task {
		
		ProgrammingLanguage[1,*] programmingLanguages with ConceptInstance(virtualModelInstance=container.container);

		create(String name, TaskType taskType) {
			super(parameters.name,parameters.taskType);
		}
		
		void isAuthorizedProducedArtifact(required Artifact artifact) {
			boolean returned = super.isAuthorizedProducedArtifact(parameters.artifact);
		}
	}

	public concept SoftwareEngineeringTaskType extends TaskType {

		create(String name) {
			super(parameters.name);
		}

		delete() {
		}

	}
}
